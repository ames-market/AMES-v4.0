/* ============================================================================
 * AMES Wholesale Power Market Test Bed (Java): A Free Open-Source Test-Bed
 *         for the Agent-based Modeling of Electricity Systems
 * ============================================================================
 *
 * (C) Copyright 2008, by Hongyan Li, Junjie Sun, and Leigh Tesfatsion
 *
 *    Homepage: http://www.econ.iastate.edu/tesfatsi/AMESMarketHome.htm
 *
 * LICENSING TERMS
 * The AMES Market Package is licensed by the copyright holders (Junjie Sun,
 * Hongyan Li, and Leigh Tesfatsion) as free open-source software under the
 * terms of the GNU General Public License (GPL). Anyone who is interested is
 * allowed to view, modify, and/or improve upon the code used to produce this
 * package, but any software generated using all or part of this code must be
 * released as free open-source software in turn. The GNU GPL can be viewed in
 * its entirety as in the following site: http://www.gnu.org/licenses/gpl.html
 */


/*
 * LearnOption1.java
 *
 * Created on June 1, 2007, 12:28 PM
 */

package AMESGUIFrame;

import javax.swing.JOptionPane;

import amesmarket.Support;

public class LearnOption1 extends javax.swing.JFrame {

	/** Creates new form LearnOption1
	 * @param frame
	 * @param bShow
	 */
	public LearnOption1(AMESFrame frame, boolean bShow) {
		this.amesFrame=frame;
		this.bPrevNextButtonShown=bShow;
		this.bOkSelect=false;

		this.initComponents();

		if(this.bPrevNextButtonShown) {
			this.setTitle("Step 4: Variant of Roth Erev RL: Parameters");
			this.OKButton.setVisible(false);
		}
		else {
			this.setTitle("Variant of Roth Erev RL: Parameters");
			this.NextButton.setVisible(false);
			this.PrevButton.setVisible(false);
		}

	}

	public void SetInitParameters(double dInitPropensity, double dCooling, double dRecency, double dExperimentation,
			double iM1, double iM2, double iM3, double dRI_MAX_Lower,
			double dRI_MAX_Upper, double dRI_MIN_C, double dSlopeStart, double iReward) {

		this.bOkSelect=false;

		this.Cooling=dCooling;
		this.Experimentation=dExperimentation;
		this.InitPropensity=dInitPropensity;
		this.Recency=dRecency;

		this.M1=(int)iM1;
		this.M2=(int)iM2;
		this.M3=(int)iM3;
		this.RI_MAX_Lower=dRI_MAX_Lower;
		this.RI_MAX_Upper=dRI_MAX_Upper;
		this.RI_MIN_C=dRI_MIN_C;
		this.SlopeStart=dSlopeStart;
		this.iRewardSelection=(int)iReward;

		this.CoolingTextField.setText(String.valueOf(this.Cooling));
		this.ExperimentationTextField.setText(String.valueOf(this.Experimentation));
		this.InitPropensityTextField.setText(String.valueOf(this.InitPropensity));
		this.RecencyTextField.setText(String.valueOf(this.Recency));

		this.M1TextField.setText(String.valueOf(this.M1));
		this.M2TextField.setText(String.valueOf(this.M2));
		this.M3TextField.setText(String.valueOf(this.M3));
		this.RI_MAX_LowerTextField.setText(String.valueOf(this.RI_MAX_Lower));
		this.RI_MAX_UpperTextField.setText(String.valueOf(this.RI_MAX_Upper));
		this.RI_MIN_CTextField.setText(String.valueOf(this.RI_MIN_C));
		this.SlopeStartTextField.setText(String.valueOf(this.SlopeStart));

		if(this.iRewardSelection==1) {
			this.NetEarningsRadioButton.setSelected(true);
		} else {
			this.ProfitRadioButton.setSelected(true);
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		this.buttonGroup1 = new javax.swing.ButtonGroup();
		this.buttonGroup2 = new javax.swing.ButtonGroup();
		this.buttonGroup3 = new javax.swing.ButtonGroup();
		this.buttonGroup4 = new javax.swing.ButtonGroup();
		this.jPanel1 = new javax.swing.JPanel();
		this.jLabel1 = new javax.swing.JLabel();
		this.CoolingTextField = new javax.swing.JTextField();
		this.jLabel2 = new javax.swing.JLabel();
		this.ExperimentationTextField = new javax.swing.JTextField();
		this.jLabel3 = new javax.swing.JLabel();
		this.InitPropensityTextField = new javax.swing.JTextField();
		this.jLabel4 = new javax.swing.JLabel();
		this.RecencyTextField = new javax.swing.JTextField();
		this.jPanel2 = new javax.swing.JPanel();
		this.jLabel5 = new javax.swing.JLabel();
		this.M1TextField = new javax.swing.JTextField();
		this.M2TextField = new javax.swing.JTextField();
		this.jLabel6 = new javax.swing.JLabel();
		this.jLabel7 = new javax.swing.JLabel();
		this.M3TextField = new javax.swing.JTextField();
		this.jLabel8 = new javax.swing.JLabel();
		this.RI_MAX_LowerTextField = new javax.swing.JTextField();
		this.jLabel9 = new javax.swing.JLabel();
		this.RI_MAX_UpperTextField = new javax.swing.JTextField();
		this.jLabel10 = new javax.swing.JLabel();
		this.SlopeStartTextField = new javax.swing.JTextField();
		this.jLabel11 = new javax.swing.JLabel();
		this.RI_MIN_CTextField = new javax.swing.JTextField();
		this.OKButton = new javax.swing.JButton();
		this.CancelButton = new javax.swing.JButton();
		this.PrevButton = new javax.swing.JButton();
		this.NextButton = new javax.swing.JButton();
		this.jLabel12 = new javax.swing.JLabel();
		this.GenNameComboBox = new javax.swing.JComboBox();
		this.jPanel3 = new javax.swing.JPanel();
		this.ProfitRadioButton = new javax.swing.JRadioButton();
		this.NetEarningsRadioButton = new javax.swing.JRadioButton();

		this.jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Learning Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12), new java.awt.Color(0, 0, 0)));
		this.jPanel1.setFont(new java.awt.Font("Arial", 0, 12));

		this.jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel1.setText("Cooling:");
		this.jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.CoolingTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.CoolingTextField.setText("1000");
		this.CoolingTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel2.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel2.setText("Experimentation:");
		this.jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.ExperimentationTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.ExperimentationTextField.setText("0.96");
		this.ExperimentationTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel3.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel3.setText("Initial Propensity:");
		this.jLabel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.InitPropensityTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.InitPropensityTextField.setText("6000");
		this.InitPropensityTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel4.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel4.setText("Recency:");
		this.jLabel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.RecencyTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.RecencyTextField.setText("0.04");
		this.RecencyTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(this.jPanel1);
		this.jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGap(22, 22, 22)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(this.jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
										.addComponent(this.ExperimentationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(this.jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
										.addComponent(this.InitPropensityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(this.jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
										.addComponent(this.CoolingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(this.jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
										.addComponent(this.RecencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addContainerGap())
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel3)
								.addComponent(this.InitPropensityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel1)
								.addComponent(this.CoolingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel4)
								.addComponent(this.RecencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel2)
								.addComponent(this.ExperimentationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		this.jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Action Domain Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12), new java.awt.Color(0, 0, 0)));
		this.jPanel2.setFont(new java.awt.Font("Arial", 0, 12));

		this.jLabel5.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel5.setText("M1:");
		this.jLabel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.M1TextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.M1TextField.setText("10");
		this.M1TextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.M2TextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.M2TextField.setText("10");
		this.M2TextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel6.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel6.setText("M2:");
		this.jLabel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel7.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel7.setText("M3:");
		this.jLabel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.M3TextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.M3TextField.setText("1");
		this.M3TextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel8.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel8.setText("RIMaxL:");
		this.jLabel8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.RI_MAX_LowerTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.RI_MAX_LowerTextField.setText("0.75");
		this.RI_MAX_LowerTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel9.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel9.setText("RIMaxU:");
		this.jLabel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.RI_MAX_UpperTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.RI_MAX_UpperTextField.setText("0.75");
		this.RI_MAX_UpperTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel10.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel10.setText("Slope Start:");
		this.jLabel10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.SlopeStartTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.SlopeStartTextField.setText("0.001");
		this.SlopeStartTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.jLabel11.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel11.setText("RIMinC:");
		this.jLabel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.RI_MIN_CTextField.setFont(new java.awt.Font("Arial", 0, 12));
		this.RI_MIN_CTextField.setText("1.00");
		this.RI_MIN_CTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(this.jPanel2);
		this.jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addGap(22, 22, 22)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.SlopeStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.RI_MIN_CTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.M1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.M2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.M3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.RI_MAX_LowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(this.jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
										.addComponent(this.RI_MAX_UpperTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
						.addGap(30, 30, 30))
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.M1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(this.jLabel5))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.M2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(this.jLabel6))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.M3TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(this.jLabel7))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.RI_MAX_LowerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(this.jLabel8))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.RI_MAX_UpperTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(this.jLabel9))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel11)
								.addComponent(this.RI_MIN_CTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel10)
								.addComponent(this.SlopeStartTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		this.OKButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.OKButton.setText("Ok");
		this.OKButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		this.OKButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.OKButtonActionPerformed(evt);
			}
		});

		this.CancelButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.CancelButton.setText("Cancel");
		this.CancelButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		this.CancelButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		this.CancelButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.CancelButtonActionPerformed(evt);
			}
		});

		this.PrevButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.PrevButton.setText("<< Prev");
		this.PrevButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		this.PrevButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.PrevButtonActionPerformed(evt);
			}
		});

		this.NextButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.NextButton.setText("Next >>");
		this.NextButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
		this.NextButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.NextButtonActionPerformed(evt);
			}
		});

		this.jLabel12.setFont(new java.awt.Font("Arial", 0, 12));
		this.jLabel12.setText("GenCos:");
		this.jLabel12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		this.GenNameComboBox.setEditable(true);
		this.GenNameComboBox.setFont(new java.awt.Font("Arial", 0, 12));
		this.GenNameComboBox.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.GenNameComboBoxActionPerformed(evt);
			}
		});

		this.jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Reward Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 12), new java.awt.Color(0, 0, 0)));

		this.buttonGroup1.add(this.ProfitRadioButton);
		this.ProfitRadioButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.ProfitRadioButton.setText("Profits");
		this.ProfitRadioButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.ProfitRadioButtonActionPerformed(evt);
			}
		});

		this.buttonGroup1.add(this.NetEarningsRadioButton);
		this.NetEarningsRadioButton.setFont(new java.awt.Font("Arial", 0, 12));
		this.NetEarningsRadioButton.setText("Net Earnings");
		this.NetEarningsRadioButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LearnOption1.this.NetEarningsRadioButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(this.jPanel3);
		this.jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addGap(16, 16, 16)
						.addComponent(this.ProfitRadioButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
						.addComponent(this.NetEarningsRadioButton)
						.addGap(51, 51, 51))
				);
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.ProfitRadioButton)
								.addComponent(this.NetEarningsRadioButton))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
		this.getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(33, 33, 33)
						.addComponent(this.jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
						.addComponent(this.GenNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(22, 22, 22))
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(this.jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(this.jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(this.jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addContainerGap(58, Short.MAX_VALUE)
						.addComponent(this.OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(this.CancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addComponent(this.PrevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(16, 16, 16)
						.addComponent(this.NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.jLabel12)
								.addComponent(this.GenNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGap(18, 18, 18)
						.addComponent(this.jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(this.jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(this.jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(this.NextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(this.PrevButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(this.CancelButton)
								.addComponent(this.OKButton))
						.addContainerGap())
				);

		this.pack();
	}// </editor-fold>//GEN-END:initComponents

	private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
		String strErrorMessage=this.SingleGenDataVerify();
		if(strErrorMessage.isEmpty()) {
			this.genLearningData[this.iSelectedIndex][0]=this.InitPropensity;
			this.genLearningData[this.iSelectedIndex][1]=this.Cooling;
			this.genLearningData[this.iSelectedIndex][2]=this.Recency;
			this.genLearningData[this.iSelectedIndex][3]=this.Experimentation;
			this.genLearningData[this.iSelectedIndex][4]=this.M1;
			this.genLearningData[this.iSelectedIndex][5]=this.M2;
			this.genLearningData[this.iSelectedIndex][6]=this.M3;
			this.genLearningData[this.iSelectedIndex][7]=this.RI_MAX_Lower;
			this.genLearningData[this.iSelectedIndex][8]=this.RI_MAX_Upper;
			this.genLearningData[this.iSelectedIndex][9]=this.RI_MIN_C;
			this.genLearningData[this.iSelectedIndex][10]=this.SlopeStart;
			this.genLearningData[this.iSelectedIndex][11]=this.iRewardSelection;
		}

		this.setVisible(false);
		this.amesFrame.activeConfig5();
	}//GEN-LAST:event_NextButtonActionPerformed

	private void PrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevButtonActionPerformed
		this.setVisible(false);
		this.amesFrame.activeConfig4();
	}//GEN-LAST:event_PrevButtonActionPerformed

	private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
		this.setVisible(false);
	}//GEN-LAST:event_CancelButtonActionPerformed

	private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
		String strErrorMessage=this.SingleGenDataVerify();
		if(!strErrorMessage.isEmpty()) {
			JOptionPane.showMessageDialog(this, strErrorMessage, "Learning Data Verify Message", JOptionPane.ERROR_MESSAGE);
			return;
		}
		else {
			this.genLearningData[this.iSelectedIndex][0]=this.InitPropensity;
			this.genLearningData[this.iSelectedIndex][1]=this.Cooling;
			this.genLearningData[this.iSelectedIndex][2]=this.Recency;
			this.genLearningData[this.iSelectedIndex][3]=this.Experimentation;
			this.genLearningData[this.iSelectedIndex][4]=this.M1;
			this.genLearningData[this.iSelectedIndex][5]=this.M2;
			this.genLearningData[this.iSelectedIndex][6]=this.M3;
			this.genLearningData[this.iSelectedIndex][7]=this.RI_MAX_Lower;
			this.genLearningData[this.iSelectedIndex][8]=this.RI_MAX_Upper;
			this.genLearningData[this.iSelectedIndex][9]=this.RI_MIN_C;
			this.genLearningData[this.iSelectedIndex][10]=this.SlopeStart;
			this.genLearningData[this.iSelectedIndex][11]=this.iRewardSelection;
		}

		strErrorMessage=this.DataVerify();

		if(strErrorMessage.isEmpty()) {
			this.bOkSelect=true;
			this.setVisible(false);

			this.amesFrame.learnOption1.loadData(this.amesFrame.genData, this.genLearningData);

			this.amesFrame.InitializeAMESMarket();
		}
		else {
			JOptionPane.showMessageDialog(this, strErrorMessage, "Learning Data Verify Message", JOptionPane.ERROR_MESSAGE);
		}
	}
	//GEN-LAST:event_OKButtonActionPerformed

	private void GenNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenNameComboBoxActionPerformed

		if(!this.bDataLoad) {
			return;
		}

		int iNewSelectedIndex=this.GenNameComboBox.getSelectedIndex();
		// nothing left in ComboBox
		if(this.GenNameComboBox.getSelectedItem()==null) {
			return;
		}

		String selectedName=(String)this.GenNameComboBox.getSelectedItem();

		if(this.genName.equalsIgnoreCase(selectedName)) {
			return;
		} else {
			String strErrorMessage=this.SingleGenDataVerify();
			if(strErrorMessage.isEmpty()) {
				this.genLearningData[this.iSelectedIndex][0]=this.InitPropensity;
				this.genLearningData[this.iSelectedIndex][1]=this.Cooling;
				this.genLearningData[this.iSelectedIndex][2]=this.Recency;
				this.genLearningData[this.iSelectedIndex][3]=this.Experimentation;
				this.genLearningData[this.iSelectedIndex][4]=this.M1;
				this.genLearningData[this.iSelectedIndex][5]=this.M2;
				this.genLearningData[this.iSelectedIndex][6]=this.M3;
				this.genLearningData[this.iSelectedIndex][7]=this.RI_MAX_Lower;
				this.genLearningData[this.iSelectedIndex][8]=this.RI_MAX_Upper;
				this.genLearningData[this.iSelectedIndex][9]=this.RI_MIN_C;
				this.genLearningData[this.iSelectedIndex][10]=this.SlopeStart;
				this.genLearningData[this.iSelectedIndex][11]=this.iRewardSelection;

				this.iSelectedIndex=iNewSelectedIndex;
			} else {
				return;
			}
		}

		this.genName=selectedName;

		this.SelectGen(this.genName);
	}//GEN-LAST:event_GenNameComboBoxActionPerformed

	private void ProfitRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProfitRadioButtonActionPerformed
		this.iRewardSelection=0;
		this.genLearningData[this.iSelectedIndex][11]=this.iRewardSelection;
	}//GEN-LAST:event_ProfitRadioButtonActionPerformed

	private void NetEarningsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetEarningsRadioButtonActionPerformed
		this.iRewardSelection=1;
		this.genLearningData[this.iSelectedIndex][11]=this.iRewardSelection;
	}//GEN-LAST:event_NetEarningsRadioButtonActionPerformed


	public String SingleGenDataVerify() {
		String strTemp=this.CoolingTextField.getText();
		double dTemp;

		String message="The Cooling paramter should bigger than "+ 0;
		try {
			dTemp=Support.parseDouble(strTemp);

			if(dTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.Cooling=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.ExperimentationTextField.getText();
		message="The Experimentation paramter should bigger than "+ 0;
		try {
			dTemp=Support.parseDouble(strTemp);

			if(dTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.Experimentation=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.InitPropensityTextField.getText();
		message="The InitPropensity paramter should bigger than "+ 0;
		try {
			dTemp=Support.parseDouble(strTemp);

			if(dTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.InitPropensity=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.RecencyTextField.getText();
		message="The Recency paramter should bigger than "+ 0;
		try {
			dTemp=Support.parseDouble(strTemp);

			if(dTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.Recency=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.M1TextField.getText();
		int iTemp;
		message="The M1 paramter should bigger than "+ 0;
		try {
			iTemp=Integer.parseInt(strTemp);

			if(iTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.M1=iTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.M2TextField.getText();
		message="The M2 paramter should bigger than "+ 0;
		try {
			iTemp=Integer.parseInt(strTemp);

			if(iTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.M2=iTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.M3TextField.getText();
		message="The M3 paramter should bigger than "+ 0;
		try {
			iTemp=Integer.parseInt(strTemp);

			if(iTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.M3=iTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.RI_MAX_LowerTextField.getText();
		message="The RIMaxL paramter should greater than or equal to 0.0 and less than 1.0!";
		try {
			dTemp=Support.parseDouble(strTemp);

			if((dTemp<0)||(dTemp>=1.0)) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.RI_MAX_Lower=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.RI_MAX_UpperTextField.getText();
		message="The RIMaxU paramter should greater than or equal to 0.0 and less than 1.0!";
		try {
			dTemp=Support.parseDouble(strTemp);

			if((dTemp<0)||(dTemp>=1.0)) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.RI_MAX_Upper=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.RI_MIN_CTextField.getText();
		message="The RIMinC paramter should greater than 0.0 and less than or equal to 1.0!";
		try {
			dTemp=Support.parseDouble(strTemp);

			if((dTemp<=0)||(dTemp>1.0)) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.RI_MIN_C=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		strTemp=this.SlopeStartTextField.getText();
		message="The SlopeStart paramter should bigger than "+ 0;
		try {
			dTemp=Support.parseDouble(strTemp);

			if(dTemp<0) {
				JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			} else {
				this.SlopeStart=dTemp;
			}
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, message, "Error Message", JOptionPane.ERROR_MESSAGE);
			return message;
		}

		if(this.M3>1) {
			if(this.RI_MIN_C>=1.0) {
				JOptionPane.showMessageDialog(this, "When M3 is bigger than 1, RI_MIN_C should less than 1.0", "Error Message", JOptionPane.ERROR_MESSAGE);
				return message;
			}
		}

		//amesFrame.SetLearningParameters(Cooling, Experimentation, InitPropensity, Recency, M1, M2, M3, RI_MAX_Lower, RI_MAX_Upper, RI_MIN_C, SlopeStart);
		return "";
	}

	public String DataVerify() {
		String strMessage="";

		for(int i=0; i<this.genLearningData.length; i++) {
			String genName=(String)this.GenNameComboBox.getItemAt(i);
			String message=genName+"'s Cooling paramter should bigger than 0! \n";
			if(this.genLearningData[i][1]<0) {
				strMessage+=message;
			}

			message=genName+"'s InitPropensity paramter should bigger than 0! \n";
			if(this.genLearningData[i][0]<0) {
				strMessage+=message;
			}

			message=genName+"'s Recency paramter should bigger than 0! \n";
			if(this.genLearningData[i][2]<0) {
				strMessage+=message;
			}

			message=genName+"'s Experimentation paramter should bigger than 0! \n";
			if(this.genLearningData[i][3]<0) {
				strMessage+=message;
			}

			message=genName+"'s M1 paramter should bigger than 0! \n";
			if(this.genLearningData[i][4]<0) {
				strMessage+=message;
			}

			message=genName+"'s M2 paramter should bigger than 0! \n";
			if(this.genLearningData[i][5]<0) {
				strMessage+=message;
			}

			message=genName+"'s M3 paramter should bigger than 0! \n";
			if(this.genLearningData[i][6]<0) {
				strMessage+=message;
			}

			message=genName+"'s RIMaxL paramter should greater than or equal to 0.0 and less than 1.0!\n";
			if((this.genLearningData[i][7]<0)||(this.genLearningData[i][7]>=1.0)) {
				strMessage+=message;
			}

			message=genName+"'s RIMaxU paramter should greater than or equal to 0.0 and less than 1.0!\n";
			if((this.genLearningData[i][8]<0)||(this.genLearningData[i][8]>=1.0)) {
				strMessage+=message;
			}

			message=genName+"'s RIMinC paramter should greater than 0.0 and less than or equal to 1.0!\n";
			if((this.genLearningData[i][9]<0)||(this.genLearningData[i][9]>1.0)) {
				strMessage+=message;
			}

			message=genName+"'s SlopeStart paramter should bigger than 0!\n";
			if(this.genLearningData[i][10]<0) {
				strMessage+=message;
			}

			if(this.genLearningData[i][6]>1) { //M3
				if(this.genLearningData[i][9]>=1.0) { //RIMinC
					strMessage+="When M3 is bigger than 1, RI_MIN_C should less than 1.0!\n";
				}
			}
		}

		if(strMessage.isEmpty()) {
			this.amesFrame.SetLearningParameters(this.genLearningData);
		}

		return strMessage;
	}

	public double [][] saveData( ) {
		return this.genLearningData;
	}

	public boolean IfOkSelect() {
		return this.bOkSelect;
	}

	public void  loadData(Object [][] genData, double[][] learningData) {
		this.bDataLoad=false;

		this.GenNameComboBox.removeAllItems();
		this.genLearningData=new double[genData.length][12];

		for(int i=0; i<genData.length; i++) {
			this.GenNameComboBox.addItem(genData[i][0].toString());

			for(int j=0; j<12; j++) {
				this.genLearningData[i][j]=learningData[i][j];
			}
		}

		if(this.GenNameComboBox.getItemCount()<1) {
			return;
		}
		this.GenNameComboBox.setSelectedIndex(0);
		this.genName = (String)this.GenNameComboBox.getItemAt(0);

		this.SelectGen(this.genName);

		this.bDataLoad=true;
	}

	private void SelectGen(String name) {
		this.GenNameComboBox.setSelectedItem(name);
		int iIndex=this.GenNameComboBox.getSelectedIndex();
		this.iSelectedIndex=iIndex;

		this.SetInitParameters(this.genLearningData[iIndex][0],
				this.genLearningData[iIndex][1],
				this.genLearningData[iIndex][2],
				this.genLearningData[iIndex][3],
				this.genLearningData[iIndex][4],
				this.genLearningData[iIndex][5],
				this.genLearningData[iIndex][6],
				this.genLearningData[iIndex][7],
				this.genLearningData[iIndex][8],
				this.genLearningData[iIndex][9],
				this.genLearningData[iIndex][10],
				this.genLearningData[iIndex][11]);
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton CancelButton;
	private javax.swing.JTextField CoolingTextField;
	private javax.swing.JTextField ExperimentationTextField;
	private javax.swing.JComboBox GenNameComboBox;
	private javax.swing.JTextField InitPropensityTextField;
	private javax.swing.JTextField M1TextField;
	private javax.swing.JTextField M2TextField;
	private javax.swing.JTextField M3TextField;
	private javax.swing.JRadioButton NetEarningsRadioButton;
	private javax.swing.JButton NextButton;
	private javax.swing.JButton OKButton;
	private javax.swing.JButton PrevButton;
	private javax.swing.JRadioButton ProfitRadioButton;
	private javax.swing.JTextField RI_MAX_LowerTextField;
	private javax.swing.JTextField RI_MAX_UpperTextField;
	private javax.swing.JTextField RI_MIN_CTextField;
	private javax.swing.JTextField RecencyTextField;
	private javax.swing.JTextField SlopeStartTextField;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.ButtonGroup buttonGroup2;
	private javax.swing.ButtonGroup buttonGroup3;
	private javax.swing.ButtonGroup buttonGroup4;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel10;
	private javax.swing.JLabel jLabel11;
	private javax.swing.JLabel jLabel12;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JLabel jLabel8;
	private javax.swing.JLabel jLabel9;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	// End of variables declaration//GEN-END:variables
	private double Cooling;
	private double Experimentation;
	private double InitPropensity;
	private int M1;
	private int M2;
	private int M3;
	private double RI_MAX_Lower;
	private double RI_MAX_Upper;
	private double RI_MIN_C;
	private double Recency;
	private double SlopeStart;
	private int iRewardSelection;

	private boolean bDataLoad=false;
	private String genName;
	private int    iSelectedIndex;
	private double[][] genLearningData;

	private boolean bOkSelect;
	private boolean bPrevNextButtonShown;

	private AMESFrame amesFrame;

}
