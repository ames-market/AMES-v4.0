/* ============================================================================
 * AMES Wholesale Power Market Test Bed (Java): A Free Open-Source Test-Bed
 *         for the Agent-based Modeling of Electricity Systems
 * ============================================================================
 *
 * (C) Copyright 2008, by Hongyan Li, Junjie Sun, and Leigh Tesfatsion
 *
 *    Homepage: http://www.econ.iastate.edu/tesfatsi/AMESMarketHome.htm
 *
 * LICENSING TERMS
 * The AMES Market Package is licensed by the copyright holders (Junjie Sun,
 * Hongyan Li, and Leigh Tesfatsion) as free open-source software under the
 * terms of the GNU General Public License (GPL). Anyone who is interested is
 * allowed to view, modify, and/or improve upon the code used to produce this
 * package, but any software generated using all or part of this code must be
 * released as free open-source software in turn. The GNU GPL can be viewed in
 * its entirety as in the following site: http://www.gnu.org/licenses/gpl.html
 */


/*
 * OutputPane.java
 *
 * Created on June 16, 2007, 4:36 PM
 */

package AMESGUIFrame;


import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.JTextArea;
import javax.swing.text.DefaultCaret;

import amesmarket.AMESMarket;
import amesmarket.VersionInfo;

public class OutputPane extends javax.swing.JPanel {

    private final PrintStream printStream;

    /** Creates new form OutputPane */
    public OutputPane() {
        initComponents();

        printStream=new PrintStream(new TextAreaOutputStream(OutputTextArea));

        Font font = new Font("Courier New", Font.PLAIN, 12);
        OutputTextArea.setFont(font);
        //Ensure the output text area scrolls as we write to it.
        ((DefaultCaret) OutputTextArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        clearAllItem = popupMenu.add("Clear All");
        clearAllItem.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllItemActionPerformed(evt);
            }
        });

        popupMenu.addSeparator();

        cutItem = popupMenu.add("Cut");
        cutItem.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutItemActionPerformed(evt);
            }
        });

        copyItem = popupMenu.add("Copy");
        copyItem.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });

        pasteItem = popupMenu.add("Paste");
        pasteItem.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });

        deleteItem = popupMenu.add("Delete");
        deleteItem.addActionListener(new ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });

        // Set the component to show the popup menu
        OutputTextArea.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                if (evt.isPopupTrigger()) {
                    popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }
            public void mouseReleased(MouseEvent evt) {
                if (evt.isPopupTrigger()) {
                    popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }
        });
    }

    /**
     * Get the printstream for this panel.
     */
    public PrintStream getPrintStream() {
        return this.printStream;
    }

    private void clearAllItemActionPerformed(java.awt.event.ActionEvent evt) {
        OutputTextArea.selectAll();
        OutputTextArea.replaceSelection("");
    }

    private void cutItemActionPerformed(java.awt.event.ActionEvent evt) {
        OutputTextArea.cut();
    }

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {
        OutputTextArea.copy();
    }

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {
        OutputTextArea.paste();
    }

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {
        OutputTextArea.replaceSelection("");
    }

    /** This method is called from within the constructor to
      * initialize the form.
      * WARNING: Do NOT modify this code. The content of this method is
      * always regenerated by the Form Editor.
      */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OutputTextArea = new javax.swing.JTextArea();

        OutputTextArea.setColumns(20);
        OutputTextArea.setFont(new java.awt.Font("Arial", 0, 12));
        OutputTextArea.setRows(5);
        jScrollPane1.setViewportView(OutputTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public class TextAreaOutputStream extends OutputStream {
        private JTextArea output;

        public TextAreaOutputStream(JTextArea area) {
            output=area;
        }

        /**
         * Synchronize the method to ensure a complete write operation finishes
         * before the next one starts.
         *
         * TODO: Think about synchronization more. It seems that we need to worry
         * about writes happening from different threads, potentially, because any
         * thread can write to System.out/err which will be redirected here.
         */
        public synchronized void write(int b) throws IOException {

            //delete the buffer if too big before starting.
            //ensures the message to write will be displayed.
            if (output.getLineCount() > 10000) {
                output.select(0, 0);
                output.selectAll();
                output.replaceSelection("");
            }

            output.append(String.valueOf((char) b));
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea OutputTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JPopupMenu popupMenu = new JPopupMenu();
    private JMenuItem clearAllItem, cutItem, copyItem, pasteItem, deleteItem;

}
